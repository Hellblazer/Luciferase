package com.hellblazer.luciferase.gpu.test;

import com.hellblazer.luciferase.resource.UnifiedResourceManager;
import org.lwjgl.system.Platform;
import org.lwjgl.system.Configuration;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.TestInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Abstract base class for all LWJGL headless tests with resource management.
 * Provides platform detection, native library management, resource tracking, and graceful failure handling.
 * 
 * This class follows Java 24 patterns and integrates with JUnit 5 lifecycle.
 * All allocated resources are automatically tracked and cleaned up after each test.
 */
public abstract class LWJGLHeadlessTest implements AutoCloseable {
    
    private static final Logger log = LoggerFactory.getLogger(LWJGLHeadlessTest.class);
    
    protected static final Platform CURRENT_PLATFORM = Platform.get();
    protected static final Platform.Architecture CURRENT_ARCH = Platform.getArchitecture();
    
    // Resource management
    private final UnifiedResourceManager resourceManager = UnifiedResourceManager.getInstance();
    private final List<ByteBuffer> allocatedBuffers = new ArrayList<>();
    private final AtomicLong totalMemoryAllocated = new AtomicLong(0);
    private final AtomicBoolean resourcesReleased = new AtomicBoolean(false);
    
    @BeforeEach
    protected void initializeNativeLibraries(TestInfo testInfo) {
        log.debug("Initializing native libraries for test: {}", testInfo.getDisplayName());
        
        try {
            configureTestEnvironment();
            loadRequiredNativeLibraries();
        } catch (Throwable t) {
            var message = "Native library initialization failed: " + t.getMessage();
            log.error(message, t);
            org.junit.jupiter.api.Assumptions.assumeTrue(false, message);
        }
    }
    
    @AfterEach
    protected void cleanupNativeLibraries(TestInfo testInfo) {
        log.debug("Cleaning up native libraries for test: {}", testInfo.getDisplayName());
        try {
            cleanupTestEnvironment();
            // Ensure all resources are released
            close();
        } catch (Exception e) {
            log.warn("Error during cleanup: {}", e.getMessage());
        }
    }
    
    /**
     * Load required native libraries for this test.
     * Implementations should throw exceptions for missing dependencies.
     */
    protected abstract void loadRequiredNativeLibraries();
    
    /**
     * Clean up native library resources after test completion.
     * Default implementation does nothing - override if cleanup is needed.
     */
    protected void cleanupTestEnvironment() {
        // Default: no cleanup needed
    }
    
    /**
     * Configure the test environment with headless settings.
     * Can be overridden by subclasses for additional configuration.
     */
    protected void configureTestEnvironment() {
        // Set headless mode for any AWT dependencies
        System.setProperty("java.awt.headless", "true");
        
        // Configure LWJGL for testing
        Configuration.DEBUG.set(true);
        Configuration.DEBUG_MEMORY_ALLOCATOR.set(true);
        Configuration.DEBUG_STACK.set(true);
        
        log.debug("Configured headless test environment for platform: {}/{}", 
                 CURRENT_PLATFORM, CURRENT_ARCH);
    }
    
    /**
     * Get platform information for logging and conditional test logic.
     */
    protected final PlatformInfo getPlatformInfo() {
        return new PlatformInfo(CURRENT_PLATFORM, CURRENT_ARCH);
    }
    
    /**
     * Record containing platform and architecture information.
     */
    public record PlatformInfo(Platform platform, Platform.Architecture architecture) {
        
        public boolean is64Bit() {
            return architecture == Platform.Architecture.X64 || 
                   architecture == Platform.Architecture.ARM64;
        }
        
        public boolean isMacOS() {
            return platform == Platform.MACOSX;
        }
        
        public boolean isLinux() {
            return platform == Platform.LINUX;
        }
        
        public boolean isWindows() {
            return platform == Platform.WINDOWS;
        }
        
        public boolean isARM() {
            return architecture == Platform.Architecture.ARM64 || 
                   architecture == Platform.Architecture.ARM32;
        }
        
        public boolean hasStartOnFirstThreadSupport() {
            if (!isMacOS()) return true;
            
            var jvmOptions = System.getProperty("java.vm.options", "");
            return jvmOptions.contains("-XstartOnFirstThread");
        }
        
        @Override
        public String toString() {
            return String.format("%s/%s (%s-bit)", 
                               platform.getName(), 
                               architecture, 
                               is64Bit() ? "64" : "32");
        }
    }
}
